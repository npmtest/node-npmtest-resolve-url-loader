{"/home/travis/build/npmtest/node-npmtest-resolve-url-loader/test.js":"/* istanbul instrument in package npmtest_resolve_url_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-resolve-url-loader/lib.npmtest_resolve_url_loader.js":"/* istanbul instrument in package npmtest_resolve_url_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_resolve_url_loader = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_resolve_url_loader = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-resolve-url-loader/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-resolve-url-loader && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_resolve_url_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_resolve_url_loader\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_resolve_url_loader.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_resolve_url_loader.rollup.js'] =\n            local.assetsDict['/assets.npmtest_resolve_url_loader.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_resolve_url_loader.__dirname + '/lib.npmtest_resolve_url_loader.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-resolve-url-loader/node_modules/resolve-url-loader/index.js":"/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nvar path              = require('path'),\n    fs                = require('fs'),\n    loaderUtils       = require('loader-utils'),\n    rework            = require('rework'),\n    visit             = require('rework-visit'),\n    convert           = require('convert-source-map'),\n    camelcase         = require('camelcase'),\n    defaults          = require('lodash.defaults'),\n    SourceMapConsumer = require('source-map').SourceMapConsumer;\n\nvar findFile           = require('./lib/find-file'),\n    absoluteToRelative = require('./lib/sources-absolute-to-relative'),\n    adjustSourceMap    = require('adjust-sourcemap-loader/lib/process');\n\nvar PACKAGE_NAME = require('./package.json').name;\n\n/**\n * A webpack loader that resolves absolute url() paths relative to their original source file.\n * Requires source-maps to do any meaningful work.\n * @param {string} content Css content\n * @param {object} sourceMap The source-map\n * @returns {string|String}\n */\nfunction resolveUrlLoader(content, sourceMap) {\n  /* jshint validthis:true */\n\n  // details of the file being processed\n  var loader   = this,\n      filePath = path.dirname(loader.resourcePath);\n\n  // webpack 1: prefer loader query, else options object\n  // webpack 2; prefer loader options\n  var options = defaults(loaderUtils.getOptions(loader), loader.options[camelcase(PACKAGE_NAME)], {\n    absolute : false,\n    sourceMap: false,\n    fail     : false,\n    silent   : false,\n    keepQuery: false,\n    debug    : false,\n    root     : null\n  });\n\n  // validate root directory\n  var resolvedRoot = (typeof options.root === 'string') && path.resolve(options.root) || undefined,\n      isValidRoot  = resolvedRoot && fs.existsSync(resolvedRoot);\n  if (options.root && !isValidRoot) {\n    return handleException('\"root\" option does not resolve to a valid path');\n  }\n\n  // loader result is cacheable\n  loader.cacheable();\n\n  // incoming source-map\n  var sourceMapConsumer, contentWithMap, sourceRoot;\n  if (sourceMap) {\n\n    // support non-standard string encoded source-map (per less-loader)\n    if (typeof sourceMap === 'string') {\n      try {\n        sourceMap = JSON.parse(sourceMap);\n      }\n      catch (exception) {\n        return handleException('source-map error', 'cannot parse source-map string (from less-loader?)');\n      }\n    }\n\n    // Note the current sourceRoot before it is removed\n    //  later when we go back to relative paths, we need to add it again\n    sourceRoot = sourceMap.sourceRoot;\n\n    // leverage adjust-sourcemap-loader's codecs to avoid having to make any assumptions about the sourcemap\n    //  historically this is a regular source of breakage\n    var absSourceMap;\n    try {\n      absSourceMap = adjustSourceMap(this, {format: 'absolute'}, sourceMap);\n    }\n    catch (exception) {\n      return handleException('source-map error', exception.message);\n    }\n\n    // prepare the adjusted sass source-map for later look-ups\n    sourceMapConsumer = new SourceMapConsumer(absSourceMap);\n\n    // embed source-map in css for rework-css to use\n    contentWithMap = content + convert.fromObject(absSourceMap).toComment({multiline: true});\n  }\n  // absent source map\n  else {\n    contentWithMap = content;\n  }\n\n  // process\n  //  rework-css will throw on css syntax errors\n  var useMap = loader.sourceMap || options.sourceMap,\n      reworked;\n  try {\n    reworked = rework(contentWithMap, {source: loader.resourcePath})\n      .use(reworkPlugin)\n      .toString({\n        sourcemap        : useMap,\n        sourcemapAsObject: useMap\n      });\n  }\n    //  fail gracefully\n  catch (exception) {\n    return handleException('CSS error', exception);\n  }\n\n  // complete with source-map\n  if (useMap) {\n\n    // source-map sources seem to be relative to the file being processed\n    absoluteToRelative(reworked.map.sources, path.resolve(filePath, sourceRoot || '.'));\n\n    // Set source root again\n    reworked.map.sourceRoot = sourceRoot;\n\n    // need to use callback when there are multiple arguments\n    loader.callback(null, reworked.code, reworked.map);\n  }\n  // complete without source-map\n  else {\n    return reworked;\n  }\n\n  /**\n   * Push an error for the given exception and return the original content.\n   * @param {string} label Summary of the error\n   * @param {string|Error} [exception] Optional extended error details\n   * @returns {string} The original CSS content\n   */\n  function handleException(label, exception) {\n    var rest = (typeof exception === 'string') ? [exception] :\n               (exception instanceof Error) ? [exception.message, exception.stack.split('\\n')[1].trim()] :\n               [];\n    var message = '  resolve-url-loader cannot operate: ' + [label].concat(rest).filter(Boolean).join('\\n  ');\n    if (options.fail) {\n      loader.emitError(message);\n    }\n    else if (!options.silent) {\n      loader.emitWarning(message);\n    }\n    return content;\n  }\n\n  /**\n   * Plugin for css rework that follows SASS transpilation\n   * @param {object} stylesheet AST for the CSS output from SASS\n   */\n  function reworkPlugin(stylesheet) {\n    var URL_STATEMENT_REGEX = /(url\\s*\\()\\s*(?:(['\"])((?:(?!\\2).)*)(\\2)|([^'\"](?:(?!\\)).)*[^'\"]))\\s*(\\))/g;\n\n    // visit each node (selector) in the stylesheet recursively using the official utility method\n    //  each node may have multiple declarations\n    visit(stylesheet, function visitor(declarations) {\n      if (declarations) {\n        declarations\n          .forEach(eachDeclaration);\n      }\n    });\n\n    /**\n     * Process a declaration from the syntax tree.\n     * @param declaration\n     */\n    function eachDeclaration(declaration) {\n      var isValid = declaration.value && (declaration.value.indexOf('url') >= 0),\n          directory;\n      if (isValid) {\n\n        // reverse the original source-map to find the original sass file\n        var startPosApparent = declaration.position.start,\n            startPosOriginal = sourceMapConsumer && sourceMapConsumer.originalPositionFor(startPosApparent);\n\n        // we require a valid directory for the specified file\n        directory = startPosOriginal && startPosOriginal.source && path.dirname(startPosOriginal.source);\n        if (directory) {\n\n          // allow multiple url() values in the declaration\n          //  split by url statements and process the content\n          //  additional capture groups are needed to match quotations correctly\n          //  escaped quotations are not considered\n          declaration.value = declaration.value\n            .split(URL_STATEMENT_REGEX)\n            .map(eachSplitOrGroup)\n            .join('');\n        }\n        // source-map present but invalid entry\n        else if (sourceMapConsumer) {\n          throw new Error('source-map information is not available at url() declaration');\n        }\n      }\n\n      /**\n       * Encode the content portion of <code>url()</code> statements.\n       * There are 4 capture groups in the split making every 5th unmatched.\n       * @param {string} token A single split item\n       * @param i The index of the item in the split\n       * @returns {string} Every 3 or 5 items is an encoded url everything else is as is\n       */\n      function eachSplitOrGroup(token, i) {\n        var BACKSLASH_REGEX = /\\\\/g;\n\n        // we can get groups as undefined under certain match circumstances\n        var initialised = token || '';\n\n        // the content of the url() statement is either in group 3 or group 5\n        var mod = i % 7;\n        if ((mod === 3) || (mod === 5)) {\n\n          // split into uri and query/hash and then find the absolute path to the uri\n          var split    = initialised.split(/([?#])/g),\n              uri      = split[0],\n              absolute = uri && findFile(options).absolute(directory, uri, resolvedRoot),\n              query    = options.keepQuery ? split.slice(1).join('') : '';\n\n          // use the absolute path (or default to initialised)\n          if (options.absolute) {\n            return absolute && absolute.replace(BACKSLASH_REGEX, '/').concat(query) || initialised;\n          }\n          // module relative path (or default to initialised)\n          else {\n            var relative     = absolute && path.relative(filePath, absolute),\n                rootRelative = relative && loaderUtils.urlToRequest(relative, '~');\n            return (rootRelative) ? rootRelative.replace(BACKSLASH_REGEX, '/').concat(query) : initialised;\n          }\n        }\n        // everything else, including parentheses and quotation (where present) and media statements\n        else {\n          return initialised;\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = resolveUrlLoader;\n","/home/travis/build/npmtest/node-npmtest-resolve-url-loader/node_modules/resolve-url-loader/lib/find-file.js":"'use strict';\n\nvar fs       = require('fs'),\n    path     = require('path'),\n    defaults = require('lodash.defaults');\n\nvar PACKAGE_NAME = require('../package.json').name;\n\n/**\n * Factory for find-file with the given <code>options</code> hash.\n * @param {{debug: boolean}} [opt] Optional options hash\n */\nfunction findFile(opt) {\n  var options = defaults(opt, {\n    debug: false\n  });\n  return {\n    absolute: absolute,\n    base    : base\n  };\n\n  /**\n   * Search for the relative file reference from the <code>startPath</code> up to the process\n   * working directory, avoiding any other directories with a <code>package.json</code> or <code>bower.json</code>.\n   * @param {string} startPath The location of the uri declaration and the place to start the search from\n   * @param {string} uri The content of the url() statement, expected to be a relative file path\n   * @param {string} [limit] Optional directory to limit the search to\n   * @returns {string|null} <code>null</code> where not found else the absolute path to the file\n   */\n  function absolute(startPath, uri, limit) {\n    var basePath = base(startPath, uri, limit);\n    return !!basePath && path.resolve(basePath, uri) || null;\n  }\n\n  /**\n   * Search for the relative file reference from the <code>startPath</code> up to the process\n   * working directory, avoiding any other directories with a <code>package.json</code> or <code>bower.json</code>.\n   * @param {string} startPath The location of the uri declaration and the place to start the search from\n   * @param {string} uri The content of the url() statement, expected to be a relative file path\n   * @param {string} [limit] Optional directory to limit the search to\n   * @returns {string|null} <code>null</code> where not found else the base path upon which the uri may be resolved\n   */\n  function base(startPath, uri, limit) {\n    var messages = [];\n\n    // ensure we have some limit to the search\n    limit = limit && path.resolve(limit) || process.cwd();\n\n    // ignore data uris and ensure we are at a valid start path\n    var absoluteStart = !(/^data\\:/.test(uri)) && path.resolve(startPath);\n    if (absoluteStart) {\n\n      // find path to the root, stopping at cwd, package.json or bower.json\n      var pathToRoot = [];\n      var isWorking;\n      do {\n        pathToRoot.push(absoluteStart);\n        isWorking = testWithinLimit(absoluteStart) && testNotPackage(absoluteStart);\n        absoluteStart = path.resolve(absoluteStart, '..');\n      } while (isWorking);\n\n      // start a queue with the path to the root\n      var queue = pathToRoot.concat();\n\n      // process the queue until empty\n      //  the queue pattern ensures that we favour paths closest the the start path\n      while (queue.length) {\n\n        // shift the first item off the queue, consider it the base for our relative uri\n        var basePath = queue.shift();\n        var fullPath = path.resolve(basePath, uri);\n        messages.push(basePath);\n\n        // file exists so convert to a dataURI and end\n        if (fs.existsSync(fullPath)) {\n          flushMessages('FOUND');\n          return basePath;\n        }\n        // enqueue subdirectories that are not packages and are not in the root path\n        else {\n          enqueue(queue, basePath);\n        }\n      }\n\n      // not found\n      flushMessages('NOT FOUND');\n      return null;\n    }\n    // ignored\n    else {\n      flushMessages('IGNORED');\n      return null;\n    }\n\n    /**\n     * Enqueue subdirectories that are not packages and are not in the root path\n     * @param {Array} queue The queue to add to\n     * @param {string} basePath The path to consider\n     */\n    function enqueue(queue, basePath) {\n      fs.readdirSync(basePath)\n        .filter(function notHidden(filename) {\n          return (filename.charAt(0) !== '.');\n        })\n        .map(function toAbsolute(filename) {\n          return path.join(basePath, filename);\n        })\n        .filter(function directoriesOnly(absolutePath) {\n          return fs.existsSync(absolutePath) && fs.statSync(absolutePath).isDirectory();\n        })\n        .filter(function notInRootPath(absolutePath) {\n          return (pathToRoot.indexOf(absolutePath) < 0);\n        })\n        .filter(testNotPackage)\n        .forEach(function enqueue(absolutePath) {\n          queue.push(absolutePath);\n        });\n    }\n\n    /**\n     * Test whether the given directory is above but not equal to any of the project root directories.\n     * @param {string} absolutePath An absolute path\n     * @returns {boolean} True where a package.json or bower.json exists, else False\n     */\n    function testWithinLimit(absolutePath) {\n      var relative = path.relative(limit, absolutePath);\n      return !!relative && (relative.slice(0, 2) !== '..');\n    }\n\n    /**\n     * Print verbose debug info where <code>options.debug</code> is in effect.\n     * @param {string} result Final text to append to the message\n     */\n    function flushMessages(result) {\n      if (options.debug) {\n        var text = ['\\n' + PACKAGE_NAME + ': ' + uri]\n          .concat(messages)\n          .concat(result)\n          .join('\\n  ');\n        console.log(text);\n      }\n    }\n  }\n\n  /**\n   * Test whether the given directory is the root of its own package.\n   * @param {string} absolutePath An absolute path\n   * @returns {boolean} True where a package.json or bower.json exists, else False\n   */\n  function testNotPackage(absolutePath) {\n    return ['package.json', 'bower.json'].every(function fileFound(file) {\n      return !fs.existsSync(path.resolve(absolutePath, file));\n    });\n  }\n}\n\nmodule.exports = findFile;\n","/home/travis/build/npmtest/node-npmtest-resolve-url-loader/node_modules/resolve-url-loader/lib/sources-absolute-to-relative.js":"/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nvar path = require('path');\n\n/**\n * Convert the given array of absolute URIs to relative URIs (in place).\n * @param {Array} sources The source map sources array\n * @param {string} basePath The base path to make relative to\n */\nmodule.exports = function sourcesAbsoluteToRelative(sources, basePath) {\n  sources.forEach(sourceToRelative);\n\n  function sourceToRelative(value, i, array) {\n    array[i] = path.relative(basePath, value);\n  }\n};"}